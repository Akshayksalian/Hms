package com.hms.service;

import java.io.BufferedReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.hms.comparators.ExperienceComparator;
import com.hms.dao.CandidatesDAO;
import com.hms.dao.InterviewersDAO;
import com.hms.entities.Candidates;
import com.hms.entities.Interviewer;

@Service
@Transactional(readOnly = true)
public class InterviewersServiceImpl implements InterviewersService {

	@Autowired
	private InterviewersDAO dao;

	@Autowired
	private CandidatesDAO candao;

	/*
	 * Get Interviewer based on the id provided.
	 */
	@Override
	public Interviewer findInterviewerById(int id, String availability) {
		Interviewer interviewer = dao.findInterviewerById(id, availability);
		return interviewer;
	}

	/*
	 * Get all Interviewers
	 */
	@Override
	public List<Interviewer> findAllInterviewers() {
		return dao.findAllInterviewers();
	}

	/*
	 * Add interviewer to database.
	 */
	@Override
	@Transactional
	public void addInterviewer(Interviewer interviewer) {
		dao.addInterviewer(interviewer);
	}

	/*
	 * Once the Candidate is assigned with Interviewer this will assign them and
	 * change there status.
	 */
	@Override
	@Transactional
	public Interviewer UpdateInterviewer(Interviewer interviewer, int candId) {
		Interviewer i = findInterviewerById(interviewer.getInterviewerIdentity().getInterviewers_id(),
				interviewer.getInterviewerIdentity().getAvailability());
		Candidates c = candao.findCandidateById(candId);
		if (i == null || c == null) {
			System.out.println("My erroe");
			throw new IllegalArgumentException("Id not Found ");
		}
		i.setStatus("Yes");
		c.setStatus("Yes");
		c.setInterviewer(i);
		return dao.updateInterviewer(i, c);
	}

	/*
	 * Algorithm to get the Interviewers list for a particular candidate.
	 */
	@Override
	public List<Interviewer> preferredInterviewers(int id) {
		List<Interviewer> interviewersList = findAllInterviewers();
		Candidates candidates = candao.findCandidateById(id);
		List<String> candidatesSkills = Arrays.asList(candidates.getCandidate_skills().toLowerCase().split("/"));
		Map<Interviewer,Long> interviewerData = new HashMap<>();
		for (int i = 0; i < interviewersList.size(); i++) {
			if (interviewersList.get(i).getExp() > candidates.getExp()
					&& interviewersList.get(i).getStatus().equals("N")) {
				List<String> checkInterviewers = Arrays
						.asList(interviewersList.get(i).getInterview_skills().toLowerCase().split("/"));
				long countEqualMatches = 0;
				for (String a : checkInterviewers) {
					for (String b : candidatesSkills) {
						if (a.contains(b)) {
							countEqualMatches++;
						}
					}
				}
				if(countEqualMatches>0) {
					interviewerData.put(interviewersList.get(i),countEqualMatches);
				}
			}
		}
		Set<Entry<Interviewer,Long>> entrySet = interviewerData.entrySet();
		List<Entry<Interviewer,Long>> list = new ArrayList<>(entrySet);
		Collections.sort(list, (o1, o2) -> {
			if (o2.getKey() != o1.getKey()) {
				return o2.getValue().compareTo(o1.getValue());
			} else {
				Integer into2 = o2.getKey().getExp();
				Integer into1 = o1.getKey().getExp();
				return into2.compareTo(into1);
			}
		});
		List<Interviewer> finalList = new ArrayList<Interviewer>();
		list.forEach(e -> {
			finalList.add(e.getKey());
		});
		List<Interviewer> result = new ArrayList<Interviewer>();
		if (finalList.size() > 5) {
			for (int i = 0; i < 5; i++) {
				result.add(finalList.get(i));
			}
		} else {
			result = finalList;
		}
		Collections.sort(result, new ExperienceComparator());
		return result;
	}

	@Override
	public void fetchInterviewers() {
		String file = "D:\\CSVInterviewers.csv";
		Path pathToFile = Paths.get(file);
		List<Interviewer> interList = new ArrayList<>();
		try (BufferedReader br = Files.newBufferedReader(pathToFile)) {
			String row = br.readLine();
			while (row != null) {
				String[] attributes = row.split(",");
				Interviewer inter = getOneInterviewer(attributes);
				interList.add(inter);
				row = br.readLine();
				dao.addInterviewer(inter);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private Interviewer getOneInterviewer(String[] attributes) {
		
		return null;
	}

}